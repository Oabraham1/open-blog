// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: user.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createNewUser = `-- name: CreateNewUser :one
INSERT INTO users (username, password, email, first_name, last_name) VALUES ($1, $2, $3, $4, $5) RETURNING id, username, password, email, first_name, last_name, interests, created_at
`

type CreateNewUserParams struct {
	Username  string `json:"username"`
	Password  string `json:"password"`
	Email     string `json:"email"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
}

func (q *Queries) CreateNewUser(ctx context.Context, arg CreateNewUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createNewUser,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.FirstName,
		arg.LastName,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Interests,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUserByID = `-- name: DeleteUserByID :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUserByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserByID, id)
	return err
}

const getPostsByUserID = `-- name: GetPostsByUserID :many
SELECT id, title, body, user_id, username, status, category, created_at, published_at, last_modified FROM posts WHERE user_id = $1
`

func (q *Queries) GetPostsByUserID(ctx context.Context, userID uuid.UUID) ([]Post, error) {
	rows, err := q.db.Query(ctx, getPostsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Body,
			&i.UserID,
			&i.Username,
			&i.Status,
			&i.Category,
			&i.CreatedAt,
			&i.PublishedAt,
			&i.LastModified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsByUserName = `-- name: GetPostsByUserName :many
SELECT id, title, body, user_id, username, status, category, created_at, published_at, last_modified FROM posts WHERE username = $1
`

func (q *Queries) GetPostsByUserName(ctx context.Context, username string) ([]Post, error) {
	rows, err := q.db.Query(ctx, getPostsByUserName, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Body,
			&i.UserID,
			&i.Username,
			&i.Status,
			&i.Category,
			&i.CreatedAt,
			&i.PublishedAt,
			&i.LastModified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, password, email, first_name, last_name, interests, created_at FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Interests,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, password, email, first_name, last_name, interests, created_at FROM users WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Interests,
		&i.CreatedAt,
	)
	return i, err
}

const updatePostBodyByPostIDAndUserID = `-- name: UpdatePostBodyByPostIDAndUserID :one
UPDATE posts SET body = $1, last_modified = $2 WHERE id = $3 AND user_id = $4 RETURNING id, title, body, user_id, username, status, category, created_at, published_at, last_modified
`

type UpdatePostBodyByPostIDAndUserIDParams struct {
	Body         string    `json:"body"`
	LastModified time.Time `json:"last_modified"`
	ID           uuid.UUID `json:"id"`
	UserID       uuid.UUID `json:"user_id"`
}

func (q *Queries) UpdatePostBodyByPostIDAndUserID(ctx context.Context, arg UpdatePostBodyByPostIDAndUserIDParams) (Post, error) {
	row := q.db.QueryRow(ctx, updatePostBodyByPostIDAndUserID,
		arg.Body,
		arg.LastModified,
		arg.ID,
		arg.UserID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Body,
		&i.UserID,
		&i.Username,
		&i.Status,
		&i.Category,
		&i.CreatedAt,
		&i.PublishedAt,
		&i.LastModified,
	)
	return i, err
}

const updateUserInterestsByID = `-- name: UpdateUserInterestsByID :exec
UPDATE users SET interests = $1 WHERE id = $2
`

type UpdateUserInterestsByIDParams struct {
	Interests []string  `json:"interests"`
	ID        uuid.UUID `json:"id"`
}

func (q *Queries) UpdateUserInterestsByID(ctx context.Context, arg UpdateUserInterestsByIDParams) error {
	_, err := q.db.Exec(ctx, updateUserInterestsByID, arg.Interests, arg.ID)
	return err
}
