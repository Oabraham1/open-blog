// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type Status string

const (
	StatusDraft     Status = "draft"
	StatusPublished Status = "published"
)

func (e *Status) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Status(s)
	case string:
		*e = Status(s)
	default:
		return fmt.Errorf("unsupported scan type for Status: %T", src)
	}
	return nil
}

type NullStatus struct {
	Status Status `json:"status"`
	Valid  bool   `json:"valid"` // Valid is true if Status is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStatus) Scan(value interface{}) error {
	if value == nil {
		ns.Status, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Status.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Status), nil
}

type Comment struct {
	ID       int32     `json:"id"`
	UserID   uuid.UUID `json:"user_id"`
	Username string    `json:"username"`
	PostID   int32     `json:"post_id"`
	// Content of the comment
	Body      string    `json:"body"`
	CreatedAt time.Time `json:"created_at"`
}

type Post struct {
	ID    int32  `json:"id"`
	Title string `json:"title"`
	// Content of the blog post
	Body         string    `json:"body"`
	UserID       uuid.UUID `json:"user_id"`
	Username     string    `json:"username"`
	Status       Status    `json:"status"`
	Category     string    `json:"category"`
	CreatedAt    time.Time `json:"created_at"`
	PublishedAt  time.Time `json:"published_at"`
	LastModified time.Time `json:"last_modified"`
}

type User struct {
	ID        uuid.UUID `json:"id"`
	Username  string    `json:"username"`
	Password  string    `json:"password"`
	Email     string    `json:"email"`
	FirstName string    `json:"first_name"`
	LastName  string    `json:"last_name"`
	Interests []string  `json:"interests"`
	CreatedAt time.Time `json:"created_at"`
}
