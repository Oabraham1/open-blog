// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: post.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createNewComment = `-- name: CreateNewComment :one
INSERT INTO comments (user_id, username, post_id, body) VALUES ($1, $2, $3, $4) RETURNING id, user_id, username, post_id, body, created_at
`

type CreateNewCommentParams struct {
	UserID   uuid.UUID `json:"user_id"`
	Username string    `json:"username"`
	PostID   uuid.UUID `json:"post_id"`
	Body     string    `json:"body"`
}

func (q *Queries) CreateNewComment(ctx context.Context, arg CreateNewCommentParams) (Comment, error) {
	row := q.db.QueryRow(ctx, createNewComment,
		arg.UserID,
		arg.Username,
		arg.PostID,
		arg.Body,
	)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.PostID,
		&i.Body,
		&i.CreatedAt,
	)
	return i, err
}

const createNewPost = `-- name: CreateNewPost :one
INSERT INTO posts (title, body, user_id, username, status, category, published_at) VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id, title, body, user_id, username, status, category, created_at, published_at, last_modified
`

type CreateNewPostParams struct {
	Title       string    `json:"title"`
	Body        string    `json:"body"`
	UserID      uuid.UUID `json:"user_id"`
	Username    string    `json:"username"`
	Status      Status    `json:"status"`
	Category    string    `json:"category"`
	PublishedAt time.Time `json:"published_at"`
}

func (q *Queries) CreateNewPost(ctx context.Context, arg CreateNewPostParams) (Post, error) {
	row := q.db.QueryRow(ctx, createNewPost,
		arg.Title,
		arg.Body,
		arg.UserID,
		arg.Username,
		arg.Status,
		arg.Category,
		arg.PublishedAt,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Body,
		&i.UserID,
		&i.Username,
		&i.Status,
		&i.Category,
		&i.CreatedAt,
		&i.PublishedAt,
		&i.LastModified,
	)
	return i, err
}

const deleteCommentByID = `-- name: DeleteCommentByID :exec
DELETE FROM comments WHERE id = $1
`

func (q *Queries) DeleteCommentByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCommentByID, id)
	return err
}

const deletePostByID = `-- name: DeletePostByID :exec
DELETE FROM posts WHERE id = $1
`

func (q *Queries) DeletePostByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePostByID, id)
	return err
}

const getAllPosts = `-- name: GetAllPosts :many
SELECT id, title, username, body, status, category, created_at, published_at, last_modified FROM posts
`

type GetAllPostsRow struct {
	ID           uuid.UUID `json:"id"`
	Title        string    `json:"title"`
	Username     string    `json:"username"`
	Body         string    `json:"body"`
	Status       Status    `json:"status"`
	Category     string    `json:"category"`
	CreatedAt    time.Time `json:"created_at"`
	PublishedAt  time.Time `json:"published_at"`
	LastModified time.Time `json:"last_modified"`
}

func (q *Queries) GetAllPosts(ctx context.Context) ([]GetAllPostsRow, error) {
	rows, err := q.db.Query(ctx, getAllPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllPostsRow{}
	for rows.Next() {
		var i GetAllPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Username,
			&i.Body,
			&i.Status,
			&i.Category,
			&i.CreatedAt,
			&i.PublishedAt,
			&i.LastModified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCommentsByPostID = `-- name: GetCommentsByPostID :many
SELECT id, user_id, username, post_id, body, created_at FROM comments WHERE post_id = $1
`

func (q *Queries) GetCommentsByPostID(ctx context.Context, postID uuid.UUID) ([]Comment, error) {
	rows, err := q.db.Query(ctx, getCommentsByPostID, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Comment{}
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Username,
			&i.PostID,
			&i.Body,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCommentsByUserID = `-- name: GetCommentsByUserID :many
SELECT id, user_id, username, post_id, body, created_at FROM comments WHERE user_id = $1
`

func (q *Queries) GetCommentsByUserID(ctx context.Context, userID uuid.UUID) ([]Comment, error) {
	rows, err := q.db.Query(ctx, getCommentsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Comment{}
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Username,
			&i.PostID,
			&i.Body,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostById = `-- name: GetPostById :one
SELECT id, title, body, user_id, username, status, category, created_at, published_at, last_modified FROM posts WHERE id = $1
`

func (q *Queries) GetPostById(ctx context.Context, id uuid.UUID) (Post, error) {
	row := q.db.QueryRow(ctx, getPostById, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Body,
		&i.UserID,
		&i.Username,
		&i.Status,
		&i.Category,
		&i.CreatedAt,
		&i.PublishedAt,
		&i.LastModified,
	)
	return i, err
}

const getPostsByCategory = `-- name: GetPostsByCategory :many
SELECT id, title, body, user_id, username, status, category, created_at, published_at, last_modified FROM posts WHERE category = $1
`

func (q *Queries) GetPostsByCategory(ctx context.Context, category string) ([]Post, error) {
	rows, err := q.db.Query(ctx, getPostsByCategory, category)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Body,
			&i.UserID,
			&i.Username,
			&i.Status,
			&i.Category,
			&i.CreatedAt,
			&i.PublishedAt,
			&i.LastModified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePostStatus = `-- name: UpdatePostStatus :one
UPDATE posts SET status = $1, published_at = $2 WHERE id = $3 AND user_id = $4 RETURNING id, title, body, user_id, username, status, category, created_at, published_at, last_modified
`

type UpdatePostStatusParams struct {
	Status      Status    `json:"status"`
	PublishedAt time.Time `json:"published_at"`
	ID          uuid.UUID `json:"id"`
	UserID      uuid.UUID `json:"user_id"`
}

func (q *Queries) UpdatePostStatus(ctx context.Context, arg UpdatePostStatusParams) (Post, error) {
	row := q.db.QueryRow(ctx, updatePostStatus,
		arg.Status,
		arg.PublishedAt,
		arg.ID,
		arg.UserID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Body,
		&i.UserID,
		&i.Username,
		&i.Status,
		&i.Category,
		&i.CreatedAt,
		&i.PublishedAt,
		&i.LastModified,
	)
	return i, err
}
