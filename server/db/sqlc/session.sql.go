// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: session.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createNewUserSession = `-- name: CreateNewUserSession :one
INSERT INTO sessions (username, refresh_token, user_agent, client_ip, expires_at) VALUES ($1, $2, $3, $4, $5) RETURNING id, username, refresh_token, user_agent, client_ip, is_blocked, expires_at, created_at
`

type CreateNewUserSessionParams struct {
	Username     string    `json:"username"`
	RefreshToken string    `json:"refresh_token"`
	UserAgent    string    `json:"user_agent"`
	ClientIp     string    `json:"client_ip"`
	ExpiresAt    time.Time `json:"expires_at"`
}

func (q *Queries) CreateNewUserSession(ctx context.Context, arg CreateNewUserSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createNewUserSession,
		arg.Username,
		arg.RefreshToken,
		arg.UserAgent,
		arg.ClientIp,
		arg.ExpiresAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSessionById = `-- name: DeleteSessionById :exec
DELETE FROM sessions WHERE id = $1
`

func (q *Queries) DeleteSessionById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSessionById, id)
	return err
}

const getSessionById = `-- name: GetSessionById :one
SELECT id, username, refresh_token, user_agent, client_ip, is_blocked, expires_at, created_at FROM sessions WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSessionById(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRow(ctx, getSessionById, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserSessionsByUsername = `-- name: GetUserSessionsByUsername :many
SELECT id, username, refresh_token, user_agent, client_ip, is_blocked, expires_at, created_at FROM sessions WHERE username = $1 ORDER BY created_at DESC
`

func (q *Queries) GetUserSessionsByUsername(ctx context.Context, username string) ([]Session, error) {
	rows, err := q.db.Query(ctx, getUserSessionsByUsername, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Session{}
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.RefreshToken,
			&i.UserAgent,
			&i.ClientIp,
			&i.IsBlocked,
			&i.ExpiresAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
