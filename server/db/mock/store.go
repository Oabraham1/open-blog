// Code generated by MockGen. DO NOT EDIT.
// Source: db/sqlc/store.go

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/Oabraham1/open-blogger/server/db/sqlc"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateNewComment mocks base method.
func (m *MockStore) CreateNewComment(ctx context.Context, arg db.CreateNewCommentParams) (db.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewComment", ctx, arg)
	ret0, _ := ret[0].(db.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewComment indicates an expected call of CreateNewComment.
func (mr *MockStoreMockRecorder) CreateNewComment(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewComment", reflect.TypeOf((*MockStore)(nil).CreateNewComment), ctx, arg)
}

// CreateNewPost mocks base method.
func (m *MockStore) CreateNewPost(ctx context.Context, arg db.CreateNewPostParams) (db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewPost", ctx, arg)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewPost indicates an expected call of CreateNewPost.
func (mr *MockStoreMockRecorder) CreateNewPost(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewPost", reflect.TypeOf((*MockStore)(nil).CreateNewPost), ctx, arg)
}

// CreateNewUser mocks base method.
func (m *MockStore) CreateNewUser(ctx context.Context, arg db.CreateNewUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewUser", ctx, arg)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewUser indicates an expected call of CreateNewUser.
func (mr *MockStoreMockRecorder) CreateNewUser(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewUser", reflect.TypeOf((*MockStore)(nil).CreateNewUser), ctx, arg)
}

// CreatePostTx mocks base method.
func (m *MockStore) CreatePostTx(ctx context.Context, arg db.CreatePostTxParams) (db.CreatePostTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePostTx", ctx, arg)
	ret0, _ := ret[0].(db.CreatePostTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePostTx indicates an expected call of CreatePostTx.
func (mr *MockStoreMockRecorder) CreatePostTx(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePostTx", reflect.TypeOf((*MockStore)(nil).CreatePostTx), ctx, arg)
}

// CreateUserTx mocks base method.
func (m *MockStore) CreateUserTx(ctx context.Context, arg db.CreateUserTxParams) (db.CreateUserTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserTx", ctx, arg)
	ret0, _ := ret[0].(db.CreateUserTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserTx indicates an expected call of CreateUserTx.
func (mr *MockStoreMockRecorder) CreateUserTx(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserTx", reflect.TypeOf((*MockStore)(nil).CreateUserTx), ctx, arg)
}

// DeletePostByID mocks base method.
func (m *MockStore) DeletePostByID(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePostByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePostByID indicates an expected call of DeletePostByID.
func (mr *MockStoreMockRecorder) DeletePostByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePostByID", reflect.TypeOf((*MockStore)(nil).DeletePostByID), ctx, id)
}

// DeleteUserByID mocks base method.
func (m *MockStore) DeleteUserByID(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserByID indicates an expected call of DeleteUserByID.
func (mr *MockStoreMockRecorder) DeleteUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByID", reflect.TypeOf((*MockStore)(nil).DeleteUserByID), ctx, id)
}

// GetAllPosts mocks base method.
func (m *MockStore) GetAllPosts(ctx context.Context) ([]db.GetAllPostsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPosts", ctx)
	ret0, _ := ret[0].([]db.GetAllPostsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPosts indicates an expected call of GetAllPosts.
func (mr *MockStoreMockRecorder) GetAllPosts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPosts", reflect.TypeOf((*MockStore)(nil).GetAllPosts), ctx)
}

// GetCommentsByPostID mocks base method.
func (m *MockStore) GetCommentsByPostID(ctx context.Context, postID uuid.UUID) ([]db.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsByPostID", ctx, postID)
	ret0, _ := ret[0].([]db.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsByPostID indicates an expected call of GetCommentsByPostID.
func (mr *MockStoreMockRecorder) GetCommentsByPostID(ctx, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsByPostID", reflect.TypeOf((*MockStore)(nil).GetCommentsByPostID), ctx, postID)
}

// GetPostById mocks base method.
func (m *MockStore) GetPostById(ctx context.Context, id uuid.UUID) (db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostById", ctx, id)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostById indicates an expected call of GetPostById.
func (mr *MockStoreMockRecorder) GetPostById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostById", reflect.TypeOf((*MockStore)(nil).GetPostById), ctx, id)
}

// GetPostsByCategory mocks base method.
func (m *MockStore) GetPostsByCategory(ctx context.Context, category string) ([]db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsByCategory", ctx, category)
	ret0, _ := ret[0].([]db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsByCategory indicates an expected call of GetPostsByCategory.
func (mr *MockStoreMockRecorder) GetPostsByCategory(ctx, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsByCategory", reflect.TypeOf((*MockStore)(nil).GetPostsByCategory), ctx, category)
}

// GetPostsByUserID mocks base method.
func (m *MockStore) GetPostsByUserID(ctx context.Context, userID uuid.UUID) ([]db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsByUserID", ctx, userID)
	ret0, _ := ret[0].([]db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsByUserID indicates an expected call of GetPostsByUserID.
func (mr *MockStoreMockRecorder) GetPostsByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsByUserID", reflect.TypeOf((*MockStore)(nil).GetPostsByUserID), ctx, userID)
}

// GetPostsByUserName mocks base method.
func (m *MockStore) GetPostsByUserName(ctx context.Context, username string) ([]db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsByUserName", ctx, username)
	ret0, _ := ret[0].([]db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsByUserName indicates an expected call of GetPostsByUserName.
func (mr *MockStoreMockRecorder) GetPostsByUserName(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsByUserName", reflect.TypeOf((*MockStore)(nil).GetPostsByUserName), ctx, username)
}

// GetUserByID mocks base method.
func (m *MockStore) GetUserByID(ctx context.Context, id uuid.UUID) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockStoreMockRecorder) GetUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockStore)(nil).GetUserByID), ctx, id)
}

// GetUserByUsername mocks base method.
func (m *MockStore) GetUserByUsername(ctx context.Context, username string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, username)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockStoreMockRecorder) GetUserByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockStore)(nil).GetUserByUsername), ctx, username)
}

// UpdatePostBodyByPostIDAndUserID mocks base method.
func (m *MockStore) UpdatePostBodyByPostIDAndUserID(ctx context.Context, arg db.UpdatePostBodyByPostIDAndUserIDParams) (db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePostBodyByPostIDAndUserID", ctx, arg)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePostBodyByPostIDAndUserID indicates an expected call of UpdatePostBodyByPostIDAndUserID.
func (mr *MockStoreMockRecorder) UpdatePostBodyByPostIDAndUserID(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePostBodyByPostIDAndUserID", reflect.TypeOf((*MockStore)(nil).UpdatePostBodyByPostIDAndUserID), ctx, arg)
}

// UpdatePostStatus mocks base method.
func (m *MockStore) UpdatePostStatus(ctx context.Context, arg db.UpdatePostStatusParams) (db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePostStatus", ctx, arg)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePostStatus indicates an expected call of UpdatePostStatus.
func (mr *MockStoreMockRecorder) UpdatePostStatus(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePostStatus", reflect.TypeOf((*MockStore)(nil).UpdatePostStatus), ctx, arg)
}

// UpdateUserInterestsByID mocks base method.
func (m *MockStore) UpdateUserInterestsByID(ctx context.Context, arg db.UpdateUserInterestsByIDParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserInterestsByID", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserInterestsByID indicates an expected call of UpdateUserInterestsByID.
func (mr *MockStoreMockRecorder) UpdateUserInterestsByID(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserInterestsByID", reflect.TypeOf((*MockStore)(nil).UpdateUserInterestsByID), ctx, arg)
}
