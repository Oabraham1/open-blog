// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createNewUser = `-- name: CreateNewUser :one
INSERT INTO users (id, username, password, email, first_name, last_name, interests, created_at) VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING id, username, email, first_name, last_name, interests
`

type CreateNewUserParams struct {
	ID        uuid.UUID `json:"id"`
	Username  string    `json:"username"`
	Password  string    `json:"password"`
	Email     string    `json:"email"`
	FirstName string    `json:"first_name"`
	LastName  string    `json:"last_name"`
	Interests []string  `json:"interests"`
	CreatedAt time.Time `json:"created_at"`
}

type CreateNewUserRow struct {
	ID        uuid.UUID `json:"id"`
	Username  string    `json:"username"`
	Email     string    `json:"email"`
	FirstName string    `json:"first_name"`
	LastName  string    `json:"last_name"`
	Interests []string  `json:"interests"`
}

func (q *Queries) CreateNewUser(ctx context.Context, arg CreateNewUserParams) (CreateNewUserRow, error) {
	row := q.db.QueryRowContext(ctx, createNewUser,
		arg.ID,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		pq.Array(arg.Interests),
		arg.CreatedAt,
	)
	var i CreateNewUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		pq.Array(&i.Interests),
	)
	return i, err
}

const deleteUserByID = `-- name: DeleteUserByID :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUserByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUserByID, id)
	return err
}

const getPostsByUserID = `-- name: GetPostsByUserID :many
SELECT id, title, body, status, category, created_at, published_at, last_modified FROM posts WHERE user_id = $1
`

type GetPostsByUserIDRow struct {
	ID           int32     `json:"id"`
	Title        string    `json:"title"`
	Body         string    `json:"body"`
	Status       Status    `json:"status"`
	Category     string    `json:"category"`
	CreatedAt    time.Time `json:"created_at"`
	PublishedAt  time.Time `json:"published_at"`
	LastModified time.Time `json:"last_modified"`
}

func (q *Queries) GetPostsByUserID(ctx context.Context, userID uuid.UUID) ([]GetPostsByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsByUserIDRow
	for rows.Next() {
		var i GetPostsByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Body,
			&i.Status,
			&i.Category,
			&i.CreatedAt,
			&i.PublishedAt,
			&i.LastModified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsByUserName = `-- name: GetPostsByUserName :many
SELECT id, title, body, status, category, created_at, published_at, last_modified FROM posts WHERE username = $1
`

type GetPostsByUserNameRow struct {
	ID           int32     `json:"id"`
	Title        string    `json:"title"`
	Body         string    `json:"body"`
	Status       Status    `json:"status"`
	Category     string    `json:"category"`
	CreatedAt    time.Time `json:"created_at"`
	PublishedAt  time.Time `json:"published_at"`
	LastModified time.Time `json:"last_modified"`
}

func (q *Queries) GetPostsByUserName(ctx context.Context, username string) ([]GetPostsByUserNameRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByUserName, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsByUserNameRow
	for rows.Next() {
		var i GetPostsByUserNameRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Body,
			&i.Status,
			&i.Category,
			&i.CreatedAt,
			&i.PublishedAt,
			&i.LastModified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, email, first_name, last_name, interests FROM users WHERE id = $1
`

type GetUserByIDRow struct {
	ID        uuid.UUID `json:"id"`
	Username  string    `json:"username"`
	Email     string    `json:"email"`
	FirstName string    `json:"first_name"`
	LastName  string    `json:"last_name"`
	Interests []string  `json:"interests"`
}

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		pq.Array(&i.Interests),
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT username, first_name, last_name, interests FROM users WHERE username = $1
`

type GetUserByUsernameRow struct {
	Username  string   `json:"username"`
	FirstName string   `json:"first_name"`
	LastName  string   `json:"last_name"`
	Interests []string `json:"interests"`
}

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (GetUserByUsernameRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i GetUserByUsernameRow
	err := row.Scan(
		&i.Username,
		&i.FirstName,
		&i.LastName,
		pq.Array(&i.Interests),
	)
	return i, err
}

const updatePostBodyByUserID = `-- name: UpdatePostBodyByUserID :exec
UPDATE posts SET body = $1 WHERE user_id = $2
`

type UpdatePostBodyByUserIDParams struct {
	Body   string    `json:"body"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) UpdatePostBodyByUserID(ctx context.Context, arg UpdatePostBodyByUserIDParams) error {
	_, err := q.db.ExecContext(ctx, updatePostBodyByUserID, arg.Body, arg.UserID)
	return err
}

const updateUserInterestsByID = `-- name: UpdateUserInterestsByID :exec
UPDATE users SET interests = $1 WHERE id = $2
`

type UpdateUserInterestsByIDParams struct {
	Interests []string  `json:"interests"`
	ID        uuid.UUID `json:"id"`
}

func (q *Queries) UpdateUserInterestsByID(ctx context.Context, arg UpdateUserInterestsByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateUserInterestsByID, pq.Array(arg.Interests), arg.ID)
	return err
}
