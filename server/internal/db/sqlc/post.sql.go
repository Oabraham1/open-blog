// Code generated by sqlc. DO NOT EDIT.
// source: post.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createNewComment = `-- name: CreateNewComment :one
INSERT INTO comments (user_id, username, post_id, body, created_at) VALUES ($1, $2, $3, $4, $5) RETURNING id, body, username, created_at
`

type CreateNewCommentParams struct {
	UserID    uuid.NullUUID  `json:"user_id"`
	Username  sql.NullString `json:"username"`
	PostID    sql.NullInt32  `json:"post_id"`
	Body      string         `json:"body"`
	CreatedAt sql.NullTime   `json:"created_at"`
}

type CreateNewCommentRow struct {
	ID        int32          `json:"id"`
	Body      string         `json:"body"`
	Username  sql.NullString `json:"username"`
	CreatedAt sql.NullTime   `json:"created_at"`
}

func (q *Queries) CreateNewComment(ctx context.Context, arg CreateNewCommentParams) (CreateNewCommentRow, error) {
	row := q.db.QueryRowContext(ctx, createNewComment,
		arg.UserID,
		arg.Username,
		arg.PostID,
		arg.Body,
		arg.CreatedAt,
	)
	var i CreateNewCommentRow
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.Username,
		&i.CreatedAt,
	)
	return i, err
}

const createNewPost = `-- name: CreateNewPost :one
INSERT INTO posts (title, body, user_id, username, status, category, created_at, published_at, last_modified) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) RETURNING id, title, body, username, status, category, created_at, published_at, last_modified
`

type CreateNewPostParams struct {
	Title        string         `json:"title"`
	Body         string         `json:"body"`
	UserID       uuid.NullUUID  `json:"user_id"`
	Username     sql.NullString `json:"username"`
	Status       Status         `json:"status"`
	Category     string         `json:"category"`
	CreatedAt    sql.NullTime   `json:"created_at"`
	PublishedAt  sql.NullTime   `json:"published_at"`
	LastModified sql.NullTime   `json:"last_modified"`
}

type CreateNewPostRow struct {
	ID           int32          `json:"id"`
	Title        string         `json:"title"`
	Body         string         `json:"body"`
	Username     sql.NullString `json:"username"`
	Status       Status         `json:"status"`
	Category     string         `json:"category"`
	CreatedAt    sql.NullTime   `json:"created_at"`
	PublishedAt  sql.NullTime   `json:"published_at"`
	LastModified sql.NullTime   `json:"last_modified"`
}

func (q *Queries) CreateNewPost(ctx context.Context, arg CreateNewPostParams) (CreateNewPostRow, error) {
	row := q.db.QueryRowContext(ctx, createNewPost,
		arg.Title,
		arg.Body,
		arg.UserID,
		arg.Username,
		arg.Status,
		arg.Category,
		arg.CreatedAt,
		arg.PublishedAt,
		arg.LastModified,
	)
	var i CreateNewPostRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Body,
		&i.Username,
		&i.Status,
		&i.Category,
		&i.CreatedAt,
		&i.PublishedAt,
		&i.LastModified,
	)
	return i, err
}

const deletePostByID = `-- name: DeletePostByID :exec
DELETE FROM posts WHERE id = $1
`

func (q *Queries) DeletePostByID(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deletePostByID, id)
	return err
}

const getAllPosts = `-- name: GetAllPosts :many
SELECT id, title, username, body, status, category, created_at, published_at, last_modified FROM posts
`

type GetAllPostsRow struct {
	ID           int32          `json:"id"`
	Title        string         `json:"title"`
	Username     sql.NullString `json:"username"`
	Body         string         `json:"body"`
	Status       Status         `json:"status"`
	Category     string         `json:"category"`
	CreatedAt    sql.NullTime   `json:"created_at"`
	PublishedAt  sql.NullTime   `json:"published_at"`
	LastModified sql.NullTime   `json:"last_modified"`
}

func (q *Queries) GetAllPosts(ctx context.Context) ([]GetAllPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPostsRow
	for rows.Next() {
		var i GetAllPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Username,
			&i.Body,
			&i.Status,
			&i.Category,
			&i.CreatedAt,
			&i.PublishedAt,
			&i.LastModified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCommentsByPostID = `-- name: GetCommentsByPostID :many
SELECT id, body, username, created_at FROM comments WHERE post_id = $1
`

type GetCommentsByPostIDRow struct {
	ID        int32          `json:"id"`
	Body      string         `json:"body"`
	Username  sql.NullString `json:"username"`
	CreatedAt sql.NullTime   `json:"created_at"`
}

func (q *Queries) GetCommentsByPostID(ctx context.Context, postID sql.NullInt32) ([]GetCommentsByPostIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getCommentsByPostID, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCommentsByPostIDRow
	for rows.Next() {
		var i GetCommentsByPostIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Body,
			&i.Username,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostById = `-- name: GetPostById :one
SELECT id, title, body, username, status, category, created_at, published_at, last_modified FROM posts WHERE id = $1
`

type GetPostByIdRow struct {
	ID           int32          `json:"id"`
	Title        string         `json:"title"`
	Body         string         `json:"body"`
	Username     sql.NullString `json:"username"`
	Status       Status         `json:"status"`
	Category     string         `json:"category"`
	CreatedAt    sql.NullTime   `json:"created_at"`
	PublishedAt  sql.NullTime   `json:"published_at"`
	LastModified sql.NullTime   `json:"last_modified"`
}

func (q *Queries) GetPostById(ctx context.Context, id int32) (GetPostByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getPostById, id)
	var i GetPostByIdRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Body,
		&i.Username,
		&i.Status,
		&i.Category,
		&i.CreatedAt,
		&i.PublishedAt,
		&i.LastModified,
	)
	return i, err
}

const getPostsByCategory = `-- name: GetPostsByCategory :many
SELECT id, title, body, username, status, category, created_at, published_at, last_modified FROM posts WHERE category = ANY($1)
`

type GetPostsByCategoryRow struct {
	ID           int32          `json:"id"`
	Title        string         `json:"title"`
	Body         string         `json:"body"`
	Username     sql.NullString `json:"username"`
	Status       Status         `json:"status"`
	Category     string         `json:"category"`
	CreatedAt    sql.NullTime   `json:"created_at"`
	PublishedAt  sql.NullTime   `json:"published_at"`
	LastModified sql.NullTime   `json:"last_modified"`
}

func (q *Queries) GetPostsByCategory(ctx context.Context, category string) ([]GetPostsByCategoryRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByCategory, category)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsByCategoryRow
	for rows.Next() {
		var i GetPostsByCategoryRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Body,
			&i.Username,
			&i.Status,
			&i.Category,
			&i.CreatedAt,
			&i.PublishedAt,
			&i.LastModified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
